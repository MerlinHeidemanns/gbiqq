expand_grid = TRUE)
query_model(model,
queries = c(
"Only indirect:" = "
(Y[X=1] > Y[X=0]) &
((Y[M = M[X=1], X=1] != Y[M = 1 - M[X=1], X=1]) & (M[X=1]!=M[X=0])) &
((Y[X=1, M = M[X=1]] == Y[X=0, M = M[X=1]]))",
"Only direct:" = "
(Y[X=1] > Y[X=0]) &
((Y[M = M[X=1], X=1] == Y[M = 1 - M[X=1], X=1]) | (M[X=1]==M[X=0])) &
((Y[X=1, M = M[X=1]] != Y[X=0, M = M[X=1]]))",
"Neither (because either):" = "
(Y[X=1] > Y[X=0]) &
((Y[M = M[X=1], X=1] != Y[M = 1 - M[X=1], X=1]) & (M[X=1]!=M[X=0])) &
((Y[X=1, M = M[X=1]] != Y[X=0, M = M[X=1]]))",
"Both:" = "
(Y[X=1] > Y[X=0]) &
((Y[M = M[X=1], X=1] != Y[M = 1 - M[X=1], X=1]) & (M[X=1]!=M[X=0])) &
((Y[X=1, M = M[X=1]] != Y[X=0, M = M[X=1]]))"),
using = "parameters",
subsets = c("X==1 & Y==1 & M==1"),
expand_grid = TRUE)
model <- make_model("X -> M -> Y <- X") %>%
set_restrictions(increasing("X", "Y"), keep = TRUE))
model <- make_model("X -> M -> Y <- X") %>%
set_restrictions(increasing("X", "Y"), keep = TRUE)
model <- make_model("X -> M -> Y <- X") %>%
set_restrictions(increasing("X", "Y"), keep = TRUE)
query_model(model,
queries = c(
"Only indirect:" = "
((Y[M = M[X=1], X=1] != Y[M = 1 - M[X=1], X=1]) & (M[X=1]!=M[X=0])) &
((Y[X=1, M = M[X=1]] == Y[X=0, M = M[X=1]]))",
"Only direct:" = "
((Y[M = M[X=1], X=1] == Y[M = 1 - M[X=1], X=1]) | (M[X=1]==M[X=0])) &
((Y[X=1, M = M[X=1]] != Y[X=0, M = M[X=1]]))",
"Neither (because either):" = "
((Y[M = M[X=1], X=1] != Y[M = 1 - M[X=1], X=1]) & (M[X=1]!=M[X=0])) &
((Y[X=1, M = M[X=1]] != Y[X=0, M = M[X=1]]))",
"Both:" = "
((Y[M = M[X=1], X=1] != Y[M = 1 - M[X=1], X=1]) & (M[X=1]!=M[X=0])) &
((Y[X=1, M = M[X=1]] != Y[X=0, M = M[X=1]]))"),
using = "parameters",
subsets = c("X==1 & Y==1"),
expand_grid = TRUE)
model$causal_types
model <- make_model("X -> M -> Y <- X") %>%
set_restrictions(increasing("X", "Y"), keep = TRUE)
query_model(model,
queries = c(
"Only indirect:" = "
((Y[M = M[X=1], X=1] != Y[M = 1 - M[X=1], X=1]) & (M[X=1]!=M[X=0])) &
((Y[X=1, M = M[X=1]] == Y[X=0, M = M[X=1]]))",
"Only direct:" = "
((Y[M = M[X=1], X=1] == Y[M = 1 - M[X=1], X=1]) | (M[X=1]==M[X=0])) &
((Y[X=1, M = M[X=1]] != Y[X=0, M = M[X=1]]))",
"Neither (because either):" = "
((Y[M = M[X=1], X=1] != Y[M = 1 - M[X=1], X=1]) & (M[X=1]!=M[X=0])) &
((Y[X=1, M = M[X=1]] != Y[X=0, M = M[X=1]]))",
"Both:" = "
((Y[M = M[X=1], X=1] != Y[M = 1 - M[X=1], X=1]) & (M[X=1]!=M[X=0])) &
((Y[X=1, M = M[X=1]] != Y[X=0, M = M[X=1]]))"),
using = "parameters",
subsets = c("X==1 & Y==1"),
expand_grid = TRUE)
model <- make_model("X -> M -> Y <- X") %>%
set_restrictions(increasing("X", "Y"), keep = TRUE) %>%
set_restrictions(c(decreasing("X", "M"), decreasing("M", "Y")
query_model(model,
queries = c(
"Only indirect:" = "
((Y[M = M[X=1], X=1] != Y[M = 1 - M[X=1], X=1]) & (M[X=1]!=M[X=0])) &
((Y[X=1, M = M[X=1]] == Y[X=0, M = M[X=1]]))",
"Only direct:" = "
((Y[M = M[X=1], X=1] == Y[M = 1 - M[X=1], X=1]) | (M[X=1]==M[X=0])) &
((Y[X=1, M = M[X=1]] != Y[X=0, M = M[X=1]]))",
"Neither (because either):" = "
((Y[M = M[X=1], X=1] != Y[M = 1 - M[X=1], X=1]) & (M[X=1]!=M[X=0])) &
((Y[X=1, M = M[X=1]] != Y[X=0, M = M[X=1]]))",
"Both:" = "
((Y[M = M[X=1], X=1] != Y[M = 1 - M[X=1], X=1]) & (M[X=1]!=M[X=0])) &
((Y[X=1, M = M[X=1]] != Y[X=0, M = M[X=1]]))"),
using = "parameters",
subsets = c("X==1 & Y==1"),
expand_grid = TRUE)
model <- make_model("X -> M -> Y <- X") %>%
set_restrictions(increasing("X", "Y"), keep = TRUE) %>%
set_restrictions(c(decreasing("X", "M"), decreasing("M", "Y")))
model <- make_model("X -> M -> Y <- X") %>%
set_restrictions(increasing("X", "Y"), keep = TRUE) %>%
set_restrictions(c(decreasing("X", "M"), decreasing("M", "Y")))
query_model(model,
queries = c(
"Only indirect:" = "
((Y[M = M[X=1], X=1] != Y[M = 1 - M[X=1], X=1]) & (M[X=1]!=M[X=0])) &
((Y[X=1, M = M[X=1]] == Y[X=0, M = M[X=1]]))",
"Only direct:" = "
((Y[M = M[X=1], X=1] == Y[M = 1 - M[X=1], X=1]) | (M[X=1]==M[X=0])) &
((Y[X=1, M = M[X=1]] != Y[X=0, M = M[X=1]]))",
"Neither (because either):" = "
((Y[M = M[X=1], X=1] != Y[M = 1 - M[X=1], X=1]) & (M[X=1]!=M[X=0])) &
((Y[X=1, M = M[X=1]] != Y[X=0, M = M[X=1]]))",
"Both:" = "
((Y[M = M[X=1], X=1] != Y[M = 1 - M[X=1], X=1]) & (M[X=1]!=M[X=0])) &
((Y[X=1, M = M[X=1]] != Y[X=0, M = M[X=1]]))"),
using = "parameters",
subsets = c("X==1 & Y==1"),
expand_grid = TRUE)
model <- make_model("X -> M -> Y <- X") %>%
set_restrictions(increasing("X", "Y"), keep = TRUE) %>%
set_restrictions(c(decreasing("X", "M"), decreasing("M", "Y")))
expand_grid = TRUE)
model
model$nodal_types$Y
model <- make_model("X -> M -> Y <- X") %>%
set_restrictions(increasing("X", "Y"), keep = TRUE) %>%
set_restrictions(c(decreasing("X", "M"), decreasing("M", "Y")))
query_model(model,
queries = c(
"Only indirect:" = "
((Y[M = M[X=1], X=1] != Y[M = 1 - M[X=1], X=1]) & (M[X=1]!=M[X=0])) &
((Y[X=1, M = M[X=1]] == Y[X=0, M = M[X=1]]))",
"Only direct:" = "
((Y[M = M[X=1], X=1] == Y[M = 1 - M[X=1], X=1]) | (M[X=1]==M[X=0])) &
((Y[X=1, M = M[X=1]] != Y[X=0, M = M[X=1]]))",
"Neither (because either):" = "
((Y[M = M[X=1], X=1] == Y[M = 1 - M[X=1], X=1]) ! (M[X=1]==M[X=0])) &
((Y[X=1, M = M[X=1]] == Y[X=0, M = M[X=1]]))",
"Both:" = "
((Y[M = M[X=1], X=1] != Y[M = 1 - M[X=1], X=1]) & (M[X=1]!=M[X=0])) &
((Y[X=1, M = M[X=1]] != Y[X=0, M = M[X=1]]))"),
using = "parameters",
subsets = c("X==1 & Y==1"),
expand_grid = TRUE)
model <- make_model("X -> M -> Y <- X") %>%
set_restrictions(increasing("X", "Y"), keep = TRUE) %>%
set_restrictions(c(decreasing("X", "M"), decreasing("M", "Y")))
query_model(model,
queries = c(
"Only indirect:" = "
((Y[M = M[X=1], X=1] != Y[M = 1 - M[X=1], X=1]) & (M[X=1]!=M[X=0])) &
((Y[X=1, M = M[X=1]] == Y[X=0, M = M[X=1]]))",
"Only direct:" = "
((Y[M = M[X=1], X=1] == Y[M = 1 - M[X=1], X=1]) | (M[X=1]==M[X=0])) &
((Y[X=1, M = M[X=1]] != Y[X=0, M = M[X=1]]))",
"Neither (because either):" = "
((Y[M = M[X=1], X=1] == Y[M = 1 - M[X=1], X=1]) | (M[X=1]==M[X=0])) &
((Y[X=1, M = M[X=1]] == Y[X=0, M = M[X=1]]))",
"Both:" = "
((Y[M = M[X=1], X=1] != Y[M = 1 - M[X=1], X=1]) & (M[X=1]!=M[X=0])) &
((Y[X=1, M = M[X=1]] != Y[X=0, M = M[X=1]]))"),
using = "parameters",
subsets = c("X==1 & Y==1"),
expand_grid = TRUE)
get_types(model, "
((Y[M = M[X=1], X=1] != Y[M = 1 - M[X=1], X=1]) & (M[X=1]!=M[X=0])) &
((Y[X=1, M = M[X=1]] == Y[X=0, M = M[X=1]]))")
get_types(model, "
((Y[M = M[X=1], X=1] != Y[M = 1 - M[X=1], X=1]) & (M[X=1]!=M[X=0]))")
model <- make_model("X -> M -> Y <- X") %>%
set_restrictions(increasing("X", "Y"), keep = TRUE) #%>%
# set_restrictions(c(decreasing("X", "M"), decreasing("M", "Y")))
query_model(model,
queries = c(
"Only indirect:" = "
((Y[M = M[X=1], X=1] != Y[M = 1 - M[X=1], X=1]) & (M[X=1]!=M[X=0])) &
((Y[X=1, M = M[X=1]] == Y[X=0, M = M[X=1]]))",
"Only direct:" = "
((Y[M = M[X=1], X=1] == Y[M = 1 - M[X=1], X=1]) | (M[X=1]==M[X=0])) &
((Y[X=1, M = M[X=1]] != Y[X=0, M = M[X=1]]))",
"Neither (because either):" = "
((Y[M = M[X=1], X=1] == Y[M = 1 - M[X=1], X=1]) | (M[X=1]==M[X=0])) &
((Y[X=1, M = M[X=1]] == Y[X=0, M = M[X=1]]))",
"Both:" = "
((Y[M = M[X=1], X=1] != Y[M = 1 - M[X=1], X=1]) & (M[X=1]!=M[X=0])) &
((Y[X=1, M = M[X=1]] != Y[X=0, M = M[X=1]]))"),
using = "parameters",
subsets = c("X==1 & Y==1"),
expand_grid = TRUE)
get_types(model, "((Y[M = M[X=1], X=1] != Y[M = 1 - M[X=1], X=1]) & (M[X=1]!=M[X=0]))")
model$nodal_types
get_types(model, "((Y[M = M[X=1], X=1] != Y[M = 1 - M[X=1], X=1]) & (M[X=1]!=M[X=0])) & X==1")
model <- make_model("X -> M -> Y <- X") %>%
set_restrictions(increasing("X", "Y"), keep = TRUE) #%>%
# set_restrictions(c(decreasing("X", "M"), decreasing("M", "Y")))
query_model(model,
queries = c(
"ate" = "Y[X=1] - Y[X=0]"
"Only indirect:" = "
((Y[M = M[X=1], X=1] != Y[M = 1 - M[X=1], X=1]) & (M[X=1]!=M[X=0])) &
((Y[X=1, M = M[X=1]] == Y[X=0, M = M[X=1]]))",
"Only direct:" = "
((Y[M = M[X=1], X=1] == Y[M = 1 - M[X=1], X=1]) | (M[X=1]==M[X=0])) &
((Y[X=1, M = M[X=1]] != Y[X=0, M = M[X=1]]))",
"Neither (because either):" = "
((Y[M = M[X=1], X=1] == Y[M = 1 - M[X=1], X=1]) | (M[X=1]==M[X=0])) &
((Y[X=1, M = M[X=1]] == Y[X=0, M = M[X=1]]))",
"Both:" = "
((Y[M = M[X=1], X=1] != Y[M = 1 - M[X=1], X=1]) & (M[X=1]!=M[X=0])) &
((Y[X=1, M = M[X=1]] != Y[X=0, M = M[X=1]]))"),
using = "parameters",
subsets = c("X==1 & Y==1"),
expand_grid = TRUE)
get_types(model, "((Y[M = M[X=1], X=1] != Y[M = 1 - M[X=1], X=1]) & (M[X=1]!=M[X=0]))")
model <- make_model("X -> M -> Y <- X") %>%
set_restrictions(increasing("X", "Y"), keep = TRUE) #%>%
# set_restrictions(c(decreasing("X", "M"), decreasing("M", "Y")))
query_model(model,
queries = c(
"ate" = "Y[X=1] - Y[X=0]",
"Only indirect:" = "
((Y[M = M[X=1], X=1] != Y[M = 1 - M[X=1], X=1]) & (M[X=1]!=M[X=0])) &
((Y[X=1, M = M[X=1]] == Y[X=0, M = M[X=1]]))",
"Only direct:" = "
((Y[M = M[X=1], X=1] == Y[M = 1 - M[X=1], X=1]) | (M[X=1]==M[X=0])) &
((Y[X=1, M = M[X=1]] != Y[X=0, M = M[X=1]]))",
"Neither (because either):" = "
((Y[M = M[X=1], X=1] == Y[M = 1 - M[X=1], X=1]) | (M[X=1]==M[X=0])) &
((Y[X=1, M = M[X=1]] == Y[X=0, M = M[X=1]]))",
"Both:" = "
((Y[M = M[X=1], X=1] != Y[M = 1 - M[X=1], X=1]) & (M[X=1]!=M[X=0])) &
((Y[X=1, M = M[X=1]] != Y[X=0, M = M[X=1]]))"),
using = "parameters",
subsets = c("X==1 & Y==1"),
expand_grid = TRUE)
increasing("X", "Y")
model <- make_model("X -> M -> Y <- X") %>%
set_restrictions(increasing("X", "Y"), keep = TRUE, join_by = "&") #%>%
# set_restrictions(c(decreasing("X", "M"), decreasing("M", "Y")))
query_model(model,
queries = c(
"ate" = "Y[X=1] - Y[X=0]",
"Only indirect:" = "
((Y[M = M[X=1], X=1] != Y[M = 1 - M[X=1], X=1]) & (M[X=1]!=M[X=0])) &
((Y[X=1, M = M[X=1]] == Y[X=0, M = M[X=1]]))",
"Only direct:" = "
((Y[M = M[X=1], X=1] == Y[M = 1 - M[X=1], X=1]) | (M[X=1]==M[X=0])) &
((Y[X=1, M = M[X=1]] != Y[X=0, M = M[X=1]]))",
"Neither (because either):" = "
((Y[M = M[X=1], X=1] == Y[M = 1 - M[X=1], X=1]) | (M[X=1]==M[X=0])) &
((Y[X=1, M = M[X=1]] == Y[X=0, M = M[X=1]]))",
"Both:" = "
((Y[M = M[X=1], X=1] != Y[M = 1 - M[X=1], X=1]) & (M[X=1]!=M[X=0])) &
((Y[X=1, M = M[X=1]] != Y[X=0, M = M[X=1]]))"),
using = "parameters",
subsets = c("X==1 & Y==1"),
expand_grid = TRUE)
get_types(model, "((Y[M = M[X=1], X=1] != Y[M = 1 - M[X=1], X=1]) & (M[X=1]!=M[X=0]))")
increasing("X", "Y")
model <- make_model("X -> M -> Y <- X") %>%
set_restrictions(c(decreasing("X", "M"), decreasing("M", "Y")))
query_model(model,
queries = c(
"Effect" = 	"(Y[X=1] > Y[X=0])",
"Only indirect:" = "
(Y[X=1] > Y[X=0]) &
((Y[M = M[X=1], X=1] != Y[M = 1 - M[X=1], X=1]) & (M[X=1]!=M[X=0])) &
((Y[X=1, M = M[X=1]] == Y[X=0, M = M[X=1]]))",
"Only direct:" = "
(Y[X=1] > Y[X=0]) &
((Y[M = M[X=1], X=1] == Y[M = 1 - M[X=1], X=1]) | (M[X=1]==M[X=0])) &
((Y[X=1, M = M[X=1]] != Y[X=0, M = M[X=1]]))",
"Neither (because either):" = "
(Y[X=1] > Y[X=0]) &
((Y[M = M[X=1], X=1] == Y[M = 1 - M[X=1], X=1]) ! (M[X=1]==M[X=0])) &
((Y[X=1, M = M[X=1]] == Y[X=0, M = M[X=1]]))",
"Both:" = "
(Y[X=1] > Y[X=0]) &
((Y[M = M[X=1], X=1] != Y[M = 1 - M[X=1], X=1]) & (M[X=1]!=M[X=0])) &
((Y[X=1, M = M[X=1]] != Y[X=0, M = M[X=1]]))"),
using = "parameters",
subsets = c("X==1 & Y==1"),
expand_grid = TRUE)
query_model(model,
queries = c(
"Only indirect:" = "
(Y[X=1] > Y[X=0]) &
((Y[M = M[X=1], X=1] != Y[M = 1 - M[X=1], X=1]) & (M[X=1]!=M[X=0])) &
((Y[X=1, M = M[X=1]] == Y[X=0, M = M[X=1]]))",
"Only direct:" = "
(Y[X=1] > Y[X=0]) &
((Y[M = M[X=1], X=1] == Y[M = 1 - M[X=1], X=1]) | (M[X=1]==M[X=0])) &
((Y[X=1, M = M[X=1]] != Y[X=0, M = M[X=1]]))",
"Neither (because either):" = "
(Y[X=1] > Y[X=0]) &
((Y[M = M[X=1], X=1] != Y[M = 1 - M[X=1], X=1]) & (M[X=1]!=M[X=0])) &
((Y[X=1, M = M[X=1]] != Y[X=0, M = M[X=1]]))",
"Both:" = "
(Y[X=1] > Y[X=0]) &
((Y[M = M[X=1], X=1] != Y[M = 1 - M[X=1], X=1]) & (M[X=1]!=M[X=0])) &
((Y[X=1, M = M[X=1]] != Y[X=0, M = M[X=1]]))"),
using = "parameters",
subsets = c("X==1 & Y==1 & M==1"),
expand_grid = TRUE)
model <- make_model("X -> M -> Y <- X") %>%
set_restrictions(c(decreasing("X", "M"), decreasing("M", "Y")))
query_model(model,
queries = c(
"Effect" = 	"(Y[X=1] > Y[X=0])",
"Only indirect:" = "
(Y[X=1] > Y[X=0]) &
((Y[M = M[X=1], X=1] != Y[M = 1 - M[X=1], X=1]) & (M[X=1]!=M[X=0])) &
((Y[X=1, M = M[X=1]] == Y[X=0, M = M[X=1]]))",
"Only direct:" = "
(Y[X=1] > Y[X=0]) &
((Y[M = M[X=1], X=1] == Y[M = 1 - M[X=1], X=1]) | (M[X=1]==M[X=0])) &
((Y[X=1, M = M[X=1]] != Y[X=0, M = M[X=1]]))",
"Neither (because either):" = "
(Y[X=1] > Y[X=0]) &
((Y[M = M[X=1], X=1] == Y[M = 1 - M[X=1], X=1]) | (M[X=1]==M[X=0])) &
((Y[X=1, M = M[X=1]] == Y[X=0, M = M[X=1]]))",
"Both:" = "
(Y[X=1] > Y[X=0]) &
((Y[M = M[X=1], X=1] != Y[M = 1 - M[X=1], X=1]) & (M[X=1]!=M[X=0])) &
((Y[X=1, M = M[X=1]] != Y[X=0, M = M[X=1]]))"),
using = "parameters",
subsets = c("X==1 & Y==1"),
expand_grid = TRUE)
library(gbiqq)
library(gbiqq)
library(gbiqq)
library(gbiqq)
fit <- fitted_model()
fit
model <- make_model("X->Y")
data_long   <- simulate_data(model, n = 4)
data_short  <- collapse_data(data_long, model)
model_2 <- gbiqq(model, data_long, stan_model = fit)
model_2$data
model_2$posterior_distribution
dim(posterior_distribution)
dim(model2$posterior_distribution)
dim(model_2$posterior_distribution)
get_parameter_names(model)
model <- make_model("X -> Y") %>%
set_confound(list(X = "Y"))
get_parameter_names(model)
model <- make_model("X->Y")
data_long   <- simulate_data(model, n = 4)
data_short  <- collapse_data(data_long, model)
model_2 <- gbiqq(model, data_long, stan_model = fit)
model_1 <- gbiqq(model, data_long)
model_4 <- gbiqq(model, data_short, stan_model = fit, data_type = "compact")
model_3 <- gbiqq(model, data_short)
collapse_data(data_short, model)
data_short
collapse_data(data.frame(X = 0), model)
library(gbiqq)
model_3 <- gbiqq(model, data_short)
data_short
library(gbiqq)
gbiqq(model, data_short)
model5 <- gbiqq(model)
model <- make_model("X->Y")
data_long   <- simulate_data(model, n = 4)
data_short  <- collapse_data(data_long, model)
fit <- fitted_model()
model_1 <- gbiqq(model, data_long)
model_2 <- gbiqq(model, data_long, stan_model = fit)
\dontrun{model_3 <- gbiqq(model, data_short)}
# Throws error unless compact data indicated
model_4 <- gbiqq(model, data_short, stan_model = fit, data_type = "compact")
# It is possible to implement updating without data, in which case the posterior
# is a stan object that reflects the prior
model5 <- gbiqq(model)
model <- make_model("X -> Y") %>%
set_prior_distribution()
df    <- simulate_data(model, n = 3)
updated_model <- gbiqq(model, df)
query_distribution( updated_model , query = "(Y[X=1] - Y[X=0])", using = "posteriors")
te("A", "B")
model <- make_model("X->Y") %>% set_restrictions(increasing("X", "Y"))
query_model(model, list(ate = te("X", "Y"),  using = "parameters")
library(gbiqq)
model <- make_model("X->Y") %>% set_restrictions(increasing("X", "Y"))
query_model(model, list(ate = te("X", "Y"),  using = "parameters")
query_model(model, list(ate = te("X", "Y")),  using = "parameters")
query_model(model, list(ate = te("X", "Y")),  using = "parameters")
model <- make_model("X->Y") %>% set_restrictions(te("X", "Y"))
library(gbiqq)
library(gbiqq)
model <- make_model("X -> Y")
data  <- simulate_data(model, n = 2)
model <- gbiqq(model, data)
make_parameters(model, type = "prior_draw")
make_parameters(model, type = "prior_mean")
make_parameters(model, type = "posterior_draw")
make_parameters(model, type = "posterior_mean")
parameters <- make_prior_distribution(model, 1)
library(gbiqq)
parameters <- make_prior_distribution(model, 1)
param_sets <- unique(model$parameters_df$param_set)
parameters <- unlist(sapply(unique(param_sets), function(v)
rdirichlet(n_draws, priors[model$parameters_df$param_set == v])))
library(gtools)
n_draws = 4
param_sets <- unique(model$parameters_df$param_set)
parameters <- unlist(sapply(unique(param_sets), function(v)
rdirichlet(n_draws, priors[model$parameters_df$param_set == v])))
prior_distribution <- matrix(parameters, nrow = n_draws)
priors <- model$parameters_df$priors
parameters <- unlist(sapply(unique(param_sets), function(v)
rdirichlet(n_draws, priors[model$parameters_df$param_set == v])))
prior_distribution <- matrix(parameters, nrow = n_draws)
colnames(prior_distribution) <- model$parameters_df$param_names
prior_distribution
library(gbiqq)
make_parameters(model, type = "prior_draw")
type = "prior_draw"
model$posterior_distribution
warning = TRUE
parameters = NULL
if(!is.null(parameters)) return(clean_param_vector(model, parameters))
if(is.null(type)) type  <- 	"prior_mean"
type
parameters <- make_prior_distribution(model, 1)
parameters
clean_param_vector(model, parameters)
gbiqq:::clean_param_vector(model, parameters)
parameters
model$parameters_df$parameters <- parameters
x <- clean_params(model$parameters_df, warning = FALSE)$parameters
model$parameters_df$parameters
parameters
model$parameters_df$parameters <- as.vector(parameters)
library(gbiqq)
gbiqq:::clean_param_vector(model, parameters)
make_parameters(model, type = "prior_draw")
make_parameters(model, type = "prior_mean")
make_parameters(model, type = "posterior_draw")
make_parameters(model, type = "posterior_mean")
make_parameters(model, type = "posterior_draw")
model$posterior_distribution[sample(nrow(df)),]
model$posterior_distribution
df <- model$posterior_distribution
parameters <- df[sample(nrow(df)),]
parameters
df <- model$posterior_distribution
parameters <- df[sample(nrow(df), 1),]
parameters
gbiqq:::clean_param_vector(model, parameters)
library(gbiqq)
make_parameters(model, type = "flat")
make_parameters(model, type = "posterior_draw")
make_parameters(model, type = "posterior_mean")
make_parameters(make_model("X -> Y"),
statement = "Y[X=1]>Y[X=0]", alphas = 2)
make_model("X -> Y") %>%
make_parameters(statement = c("Y[X=1]>Y[X=0]", "Y[X=1]<Y[X=0]"), alphas = c(2,0))
make_model("X -> Y") %>%
set_confound(list(X = "Y[X=1]>Y[X=0]"))  %>%
set_parameters(confound = list(X="Y[X=1]>Y[X=0]", X="Y[X=1]<=Y[X=0]"),
alphas = list(c(.2, .8), c(.8, .2))) %>%
set_parameters(statement = "Y[X=1]>Y[X=0]", alphas = .5) %>%
get_parameters
model <- make_model("X->Y")
data_long   <- simulate_data(model, n = 4)
data_short  <- collapse_data(data_long, model)
fit <- fitted_model()
model_1 <- gbiqq(model, data_long)
model_2 <- gbiqq(model, data_long, stan_model = fit)
# Simple examples
model <- make_model("X -> Y")
data  <- simulate_data(model, n = 2)
model <- gbiqq(model, data)
make_parameters(model, parameters = c(.25, .75, 1.25,.25, .25, .25))
make_parameters(model, type = "flat")
make_parameters(model, type = "prior_draw")
make_parameters(model, type = "prior_mean")
make_parameters(model, type = "posterior_draw")
make_parameters(model, type = "posterior_mean")
# Harder examples, using \code{define} and priors arguments to define
# specific parameters using causal syntax
make_parameters(make_model("X -> Y"),
statement = "Y[X=1]>Y[X=0]", alphas = 2)
make_model("X -> Y") %>%
make_parameters(statement = c("Y[X=1]>Y[X=0]", "Y[X=1]<Y[X=0]"), alphas = c(2,0))
# May be built up
make_model("X -> Y") %>%
set_confound(list(X = "Y[X=1]>Y[X=0]"))  %>%
set_parameters(confound = list(X="Y[X=1]>Y[X=0]", X="Y[X=1]<=Y[X=0]"),
alphas = list(c(.2, .8), c(.8, .2))) %>%
set_parameters(statement = "Y[X=1]>Y[X=0]", alphas = .5) %>%
get_parameters
fit
model_2 <- gbiqq(model, data_long, stan_model = fit)
model_4 <- gbiqq(model, data_short, stan_model = fit, data_type = "compact")
model5 <- gbiqq(model)
model_3 <- gbiqq(model, data_short)
model
object <_ model
object <- model
structure(object, class = c("summary.causal_model", "data.frame"))
summary(model)
plot.causal_model <- function(model, ...) {
plot_dag(model)
}
plot(model)
plot(make_model("X -> M -> Y"))
plot(0:1, 0:1)
plot(make_model("X -> M -> Y"))
? dagitty::graphLayout
library(gbiqq)
model <- make_model("X->Y")
clean_param_vector(model, 1:6)
? plot
? lm.plot
? plot.lm
plot.causal_model <- function(x, y, ...) {
plot_dag(x)
}
plot(model)
