% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/restrictions.R
\name{set_restrictions}
\alias{set_restrictions}
\title{Restrict a model}
\usage{
set_restrictions(model, statement = NULL, join_by = "|",
  labels = NULL, keep = FALSE, verbose = FALSE)
}
\arguments{
\item{model}{A model object generated by \code{make_model()}.}

\item{statement}{A quoted expressions defining the restriction.}

\item{join_by}{A string. The logical operator joining expanded types when \code{statement} contains wildcard (\code{.}). Can take values \code{"&"} (logical AND) or \code{"|"} (logical OR). When restriction contains wildcard (\code{.}) and \code{join_by} is not specified, it defaults to \code{"|"}, otherwise it defaults to \code{NULL}.}

\item{labels}{A list of character vectors specifying nodal types to be kept or removed from the model. Use \code{get_nodal_types} to see syntax. Note that \code{labels} gets overwritten by \code{statement} if \code{statement} is not NULL.}

\item{keep}{Logical. If `FALSE`, removes and if `TRUE` keeps only causal types specified by \code{statement} or \code{labels}.}

\item{verbose}{Logical. Whether to print expanded \code{statement} on the consule.}
}
\value{
A restricted model with nodal types saved as attributes.
}
\description{
Restrict a model's parameter space. If priors exist, prior probabilities are redistributed over remaining types.
}
\examples{

# 1. Restrict parameter space using statements
model <- make_model("X->Y") \%>\%
  set_restrictions(statement = c("X == 0"))

# Restrict to define a model with monotonicity
model <- make_model("X->Y") \%>\%
set_restrictions(statement = c("Y[X=1] < Y[X=0]"))
get_parameter_matrix(model)

# Restrict to a single type in endogenous variable
model <- make_model("X->Y") \%>\%
set_restrictions(statement =  "(Y[X = 1] == 1)", join_by = "&", keep = TRUE)
get_parameter_matrix(model)

# Restrict multiple nodes
# FLAG: CHECK PERFORMANCE
model <- make_model("X->Y<-M; X -> M" ) \%>\%
set_restrictions(statement =  c("(Y[X = 1] == 1)", "(M[X = 1] == 1)"), join_by = "&", keep = TRUE)
get_parameter_matrix(model)

# Restrictions on levels for endogenous variables aren't allowed
\dontrun{
model <- make_model("X->Y") \%>\%
set_restrictions(statement =  "(Y == 1)")
}

# 2. Restrict parameter space Using labels:
model <- make_model("X->Y") \%>\%
set_restrictions(labels = list(X = "X0", Y = "Y00"))

# Restrictions can be  with wildcards
model <- make_model("X->Y") \%>\%
set_restrictions(labels = list(Y = "Y?0"))
get_parameter_matrix(model)

# Running example: there are only four causal types
model <- make_model("S -> C -> Y <- R <- X; X -> C -> R") \%>\%
set_restrictions(labels = list(C = "C1000", R = "R0001", Y = "Y0001"), keep = TRUE)
get_parameter_matrix(model)

}
